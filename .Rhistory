system.time(for (i in 1:1000) sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(for (i in 1:1000) mean(DT[DT$SEX==2,]$pwgtp15))
library(lattice)
library(datasets)
airquality <- transform(airquality, Month=factor(Month))
xyplot(Ozone ~ Wind | Month, data=airquality, layout=c(5,1))
set.seed(10)
x <- rnorm(100)
y <- rep(0:1, each=50)
y <- x+f-f*x+rnorm(100, sd=0.5)
f <- factor(f, labels=c("Group1", "Group2"))
xyplot(y~x | f, layout=c(2,1))
f <- factor(f, labels=c("Group1", "Group2"))
set.seed(10)
x <- rnorm(100)
f <- rep(0:1, each=50)
y <- x+f-f*x+rnorm(100, sd=0.5)
f <- factor(f, labels=c("Group1", "Group2"))
xyplot(y~x | f, layout=c(2,1))
xyplot(y ~ x | f, panel= function(x,y,...) {
panel.xyplot(x,y, ...) # first call the default panel function for xyplot
panel.abline(h= median(y), lty=2) # add horizontal line at median
})
xyplot(y ~ x | f, panel= function(x,y,...) {
panel.xyplot(x,y, ...) # first call the default panel function for xyplot
panel.abline(h= median(y), lty=2) # add horizontal line at median
panel.lmline(x,y, col=2)
})
install.packages("RMySQL", type="source")
library(RMySQL)
con <- dbConnect(MySQL(), host="127.0.0.1", port= 3306, user="user",
password = "password", dbname="db")
con <- dbConnect(MySQL(), host="127.0.0.1", port= 3306, user="user",
password = "$m00ch3rOO", dbname="db")
con <- dbConnect(MySQL(), host="127.0.0.1", port= 3306, user="user",
password = """, dbname="db")
load("C:/Users/Administrator/Desktop/Scripts/LgSm-DataProcessing/.RData")
names(allData)
blankValues <- is.na(allData$sex.x)
sum(blankValues =="TRUE")
blankValues <- which(is.na(allData$sex.x))
blankValues
sex.Y <- which(is.na(allData$sex.y))
sex.Y
allData[285,1]
allData[595,1]
allData[595,1] <-
"51329"
allData[595,1]
allData(c(25, 90, 106, 222, 285, 347, 495, 585), 1)
allData[c(25, 90, 106, 222, 285, 347, 495, 585), 1]
allData[c(285, 353,497,595), 1]
duplicated(allData$id)
which(duplicated(allData$id))
allData$id[595]
allData$id[812]
allData[allData$id == "52000"]
allData[allData$id == "52000",]
allData <- allData[-c(812),]
allData[810:813,]
allData[allData$id == "51905",]
allData[allData$id == "51998",]
allData[allData$id == "51329",]
144-8
names(allData)[136]
gluData51329 <- allData[595, 137:144]
gluData51329
allData[594, 137:144] <- gluData51329
allData[594:595, 135:144]
allData <- allData[-c(595),]
allData[594:595, 135:144]
allData[594:595, 1:4]
allData[allData$id == "46003",]
allData[allData$id == "46368",]
allData[allData$id == "46445",]
allData[allData$id == "49003",]
allData[allData$id == "49290",]
allData[allData$id == "50112",] # remove
allData[allData$id == "49290",] # remove
allData[allData$id == "50714",] # remove
blankValues <- which(is.na(allData$sex.x))
blankValues
allData[allData$id == "50716",] # remove
blankValues
allData[495,1]
allData[498,1]
allData[496,1]
allData[497,1]
allData <- allData[-c(blankValues),]
which(!identical(allData$gen.x, allData$gen.y))
allData[1,]
which(identical(allData$gen.x, allData$gen.y))
allData[allData$id == "50716",] # fix (row 497)
sum(is.na(allData$gen.y))
which(is.na(allData$gen.y))
which[allData$gen.y == "NA" | "<NA>",]
which[allData$gen.y = "NA" | "<NA>",]
allData[allData$gen.y == "NA" | "<NA>",]
allData[allData$gen.y == "NA" &
"<NA>",]
allData[allData$gen.y == "NA"[]
allData[allData$gen.y == "NA"]
write.table(allData, "./mergedData.txt", sep="\t", row.names=FALSE, quote=FALSE)
write.table(allData, "./mergedData.txt", sep="\t", row.names=TRUE, quote=FALSE)
getwd()
write.table(allData, "./mergedData.txt", sep="\t", row.names=FALSE, quote=FALSE)
which(identical(allData$cage.x, allData$cage.y))
idcage<-identical(allData$cage.x, allData$cage.y)
rm(allData)
rm(check)
rm(gluData51329)
rm(blankValues)
rm(idcage)
rm(sex.Y)
list.files()
setwd("./LgSm-DataProcessing/")
list.files()
allData<- read.table("./mergedData.txt", sep="\t", header=T, na.strings="NA")
head(allData)
identical(allData$sex.y, allData$sex.x)
identical(allData$gen.x, allData$gen.y)
identical(allData$sire.x, allData$sire.y)
identical(allData$dam.x, allData$dam.y)
identical(allData$fam.x, allData$fam.y)
which(identical(allData$fam.x, allData$fam.y))
which[identical(allData$fam.x, allData$fam.y),]
which[,!identical(allData$fam.x, allData$fam.y)]
which(allData[,!identical(allData$fam.x, allData$fam.y)])
which(!identical(allData$sire.x, allData$sire.y))
where(!identical(allData$sire.x, allData$sire.y))
allData[allData$fam.y <- "BrF52-57",]
allData[allData$fam.y == "BrF52-57",]
allData<- read.table("./mergedData.txt", sep="\t", header=T, na.strings="NA")
allData[allData$fam.y == "BrF52-57",]
rm(allData)
allData<- read.table("./mergedData.txt", sep="\t", header=T, na.strings="NA")
allData[allData$fam.y == "BrF52-55",]
allData[allData$fam.y == "BrF52-55", 1:10]
allData[allData$fam.y == "BrF52-55", 1:13]
names(allData)[11:12]
names(allData)[5:6]
allData[c(539,542), c(11,12)] <- allData[c(539,542), c(5,6)]
allData[allData$fam.y == "BrF52-55", 1:13]
identical(allData$fam.x, allData$fam.y)
identical(allData$dam.x, allData$dam.y)
fam$Mismatch <- which(!identical(allData$fam.x, allData$fam.y))
famMismatch <- which(!identical(allData$fam.x, allData$fam.y))
famMismatch
famMismatch <- !identical(allData$fam.x, allData$fam.y)
famMismatch
famMismatch <- identical(allData$fam.x, allData$fam.y)
which[famMismatch == TRUE,]
which[famMismatch == TRUE]
famMismatch[famMismatch == TRUE]
famMismatch[famMismatch == TRUE,]
sum(famMismatch, famMismatch == TRUE)
famMismatch <- !match(allData$fam.x, allData$fam.y)
famIndex <- which(famMismatch == TRUE)
head(allData[1:10,1:13])
class(allData[1:13])
class(allData[,1:13])
famMismatch <- !match(allData$dam.y, allData$dam.x)
famMismatch[famMismatch = TRUE,]
famMismatch[famMismatch = TRUE]
sum(match(allData$dam.y, allData$dam.x))
sum(identical(allData$dam.y, allData$dam.x))
allData<- read.table("./mergedData.txt", sep="\t", header=T, na.strings="NA")
identical(allData$dam.y, allData$dam.x)
identical(allData$fam.y, allData$fam.x)
identical(allData$cage.y, allData$cage.x)
identical(allData$gen.y, allData$gen.x)
identical(allData$sire.y, allData$sire.x)
idAndGenoCorrected <- allData[,1:2]
head(idAndGenoCorrected)
names(idAndGenoCorrected)[2] <- "gen"
head(idAndGenoCorrected)
write.table(idAndGenoCorrected, "./idAndGeno_AIL_50-55.txt", sep="\t", row.names=FALSE)
allData<- read.table("./mergedData.txt", sep="\t", header=T, na.strings="NA")
identical(allData$sire.y, allData$sire.x)
identical(allData$dam.y, allData$dam.x)
identical(allData$gen.y, allData$gen.x)
identical(allData$sex.y, allData$sex.x)
identical(allData$cage.y, allData$cage.x)
names(allData)[1:14]
names(allData)[8:13]
allData <- allData[-c(8:13)]
names(allData)
names(allData)[2:7]
names(allData)[2:7] <- c("gen", "cage", "fam", "dam", "sire", "sex")
names(allData)[2:7]
head(allData[2:7])
unique(allData$cc)
allData[allData$cc == "AGR/L",]
allData[587, 8] <- "AGRL"
allData[587,7:9]
unique(allData$cc)
allData[allData$cc == "ARG",]
allData[535, 8] <- "AGR"
unique(allData$cc)
droplevels(allData$cc)
allData[95,1:10]
allData[95,8] <- "BL"
allData[97,1:8]
allData[93,1:8]
allData[93,9] <- "AGR"
droplevels(allData$cc)
allData[93,8] <- "AGR"
allData[93,1:10]
allData<- read.table("./mergedData.txt", sep="\t", header=T, na.strings="NA")
allData[1:2,1:15]
allData <- allData[-c(8:13)]
names(allData)[2:7] <- c("gen", "cage", "fam", "dam", "sire", "sex")
allData[allData$cc == "AGR/L",] # 587
allData[587, 8] <- "AGRL"
allData[allData$cc == "ARG",]
allData[535, 8] <- "AGR"
allData[95,1:10]
allData[95,8] <- "BL"
allData[93,1:8]
allData[93,8] <- "AGR"
droplevels(allData$cc)
allData$cc <- droplevels(allData$cc)
agouti <- len(1023)
agouti <- length(1023)
black <- length(1023)
white <- length(1023)
levels(allData$cc)
colors <- allData$cc
for (i in levels(allData$cc)){
if(i == c(A, AGL, AGR, AGRL)) {
agouti[i] <- 1
}
return(agouti)
}
for (i in levels(allData$cc)){
if(i == c("A", "AGL", "AGR", "AGRL")) {
agouti[i] <- 1
}
return(agouti)
}
for (i in levels(allData$cc)){
if(i == c("A" | "AGL" | "AGR" | "AGRL")) {
agouti[i] <- 1
}
return(agouti)
}
for (i in levels(allData$cc)){
if(i == "A" | "AGL" | "AGR" | "AGRL")) {
agouti[i] <- 1
}
return(agouti)
}
for (i in levels(allData$cc)){
if(i == "A" | "AGL" | "AGR" | "AGRL")) {
agouti[i] <- 1
}
print(agouti)
}
for (i in levels(allData$cc)){
if(i == "A" & "AGL" & "AGR" & "AGRL")) {
agouti[i] <- 1
}
print(agouti)
}
agouti <- length(1023)
for (i in allData$cc){
if(i == "A" & "AGL" & "AGR" & "AGRL")) {
agouti[i] <- 1
}
print(agouti)
}
for (i in allData$cc){
if(i == "A" & "AGL" & "AGR" & "AGRL") {
agouti[i] <- 1
}
print(agouti)
}
?level
levels(allData[1,10])
for (i in (allData$cc){
if(i == "A"){
agouti[i] <- 1
}
print(agouti)
}
for (i in allData$cc){
if(i == "A"){
agouti[i] <- 1
}
print(agouti)
}
agouti
levels(colors)
levels(colors)[levels(colors)=="AGL"] <- "A"
levels(colors)
head(colors)
unique(colors)
levels(colors)[levels(colors)=="AGR"] <- "A"
levels(colors)[levels(colors)=="AGRL"] <- "A"
levels(colors)[levels(colors)=="WL"] <- "W"
levels(colors)[levels(colors)=="WRL"] <- "W"
levels(colors)[levels(colors)=="WR"] <- "W"
levels(colors)[levels(colors)=="BL"] <- "B"
levels(colors)[levels(colors)=="BR"] <- "B"
levels(colors)[levels(colors)=="BRL"] <- "B"
levels(colors)
head(colors)
ailData$cc <- colors
allData$cc <- colors
])
head(allData[1:14])
allData<- read.table("./mergedData.txt", sep="\t", header=T, na.strings="NA")
allData <- allData[-c(8:13)]
names(allData)[2:7] <- c("gen", "cage", "fam", "dam", "sire", "sex")
allData[allData$cc == "AGR/L",] # 587
allData[587, 8] <- "AGRL"
allData[allData$cc == "ARG",]
allData[535, 8] <- "AGR"
allData[95,1:10]
allData[95,8] <- "BL"
allData[93,1:8]
allData[93,8] <- "AGR"
allData$cc <- droplevels(allData$cc)
colors <- allData$cc
levels(colors)[levels(colors)=="AGL"] <- "A"
levels(colors)[levels(colors)=="AGR"] <- "A"
levels(colors)[levels(colors)=="AGRL"] <- "A"
levels(colors)[levels(colors)=="WL"] <- "W"
levels(colors)[levels(colors)=="WR"] <- "W"
levels(colors)[levels(colors)=="WRL"] <- "W"
levels(colors)[levels(colors)=="BL"] <- "B"
levels(colors)[levels(colors)=="BR"] <- "B"
levels(colors)[levels(colors)=="BRL"] <- "B"
allData$coat <- colors
head(allData[1:14])
levels(colors)
levels(allData$cc)
allData$cc <- droplevels(allData$cc)
allData$cc
test <- tapply(allData, allData$colors, function(x) {if (x =="A"), return(0)} )
agouti <- numeric(length(allData$coat))
for (i in seq_along(allData$coat)){
if (i == "A"){
agouti[i] <- 1
} else {
agouti[i] <- 0
}
cbind(agouti, allData$coat)
colors
coat
allData$coat
for (i in seq_along(allData$coat)){
if (i == 1){
agouti[i] <- 1
} else {
agouti[i] <- 0
}
cbind(agouti, allData$coat)
agouti <- numeric(length(allData$coat))
for (i in allData$coat){
if (i == "A"){
agouti[i] <- 1
} else {
agouti[i] <- 0
}
cbind(agouti, allData$coat)
agouti <- numeric(length(allData$coat))
for (i in allData$coat){
if (i == "A"){
agouti[i] <- "Y"
} else {
agouti[i] <- "N"
}
head(agouti)
}
rm(famIndex, famMismatch)
rm(i, white)
for (i in allData$coat){
if (i == "A"){
agouti[i] <- "Y"
} else {
agouti[i] <- "N"
} return(agouti)
}
for (i in allData$coat){
if (i == "A"){
agouti[i] <- "Y"
} else {
agouti[i] <- "N"
}
return(agouti)
}
for (i in allData$coat){
if (i == "A"){
agouti[i] <- "Y"
} else {
agouti[i] <- "N"
}
agouti
agouti <- numeric(length(allData$coat))
for (i in allData$coat){
if (i == "A"){
agouti[i] <- "Y"
} else {
agouti[i] <- "N"
}
levels(coat)
levels(allData$coat)
colors
order(levels(colors))
agouti <- numeric(length(allData$coat))
for (i in allData$coat){
if (i == 1){
agouti[i] <- "Y"
} else {
agouti[i] <- "N"
}
agouti
for (i in allData$coat){
if (i == "1"){
agouti[i] <- "Y"
} else {
agouti[i] <- "N"
}
for (i in allData$coat){
if (i == "1"){
agouti[i] <- 1
} else {
agouti[i] <- 0
}
agouti
for (i in allData$coat){
agouti <- numeric(length(allData$coat))
if (i == "1"){
agouti[i] <- 1
} else {
agouti[i] <- 0
}
for (i in allData$coat){
agouti <- numeric(length(allData$coat))
if (i == "A"){
agouti[i] <- 1
} else {
agouti[i] <- 0
}
rm(agouti)
for (i in allData$coat){
agouti <- numeric(length(allData$coat))
if (i == "A"){
agouti[i] <- 1
} else {
agouti[i] <- 0
}
agouti
allData$agouti <- colors
allData$white <- colors
allData$black <- colors
allData$coat <- NULL
names(allData)
allData$agouti<- replace(allData$agouti, "A", "1")
allData$agouti<- replace(allData$agouti, A, "1")
write.table(allData, "./ailMasterData.txt", sep="\t", row.names= FALSE, quote=FALSE)
rm(idAndGenoCorrected)
covariates <- allData[c(1:36, 110:115, 120:123, 132:133, 135, 138:141)]
names(covariates)
phenotypes <- allData [-c(2:36, 110:115, 120:123, 132:133, 135, 138:141)]
names(phenotypes)
names(allData)
covariates <- allData[c(1:36, 110:115, 120:123, 131:132, 134:135, 138:141)]
names(covariates)
covariates <- covariates[-c(45)]
names(covariates)
phenotypes <- allData[-c(2:36, 110:115, 120:123, 131:132, 134:135, 138:141)]
names(phenotypes)
names(allData)
phenotypes2 <- allData[-c(2:24, 26,28,30,32,34,36,
110:115, 121:123, 131, 134, 138)]
names(phenotypes)
names(phenotypes2)
covariates$one <- rep(1, length(covariates[2]))
head(covariates)
write.table(covariates, "./ailCovariates.txt", sep="\t", row.names= FALSE, quote=FALSE)
write.table(phenotypes2, "./ailPhenotypes.txt", sep="\t", row.names= FALSE, quote=FALSE)
phen <- read.table("./ailPhenotypes.txt", sep="\t", header=T)
phen
names(phen)
phen <- read.table("./ail.txt", sep="\t", header=T)
cov <- read.table("./ailCovariates.txt", sep="\t", header=T)
names(cov)
covColNames <- names(cov)
phenoColNames <- names(phen)
phenoColNames
write.table(phenoColNames, "./phenColNames.txt", sep="\t")
write.table(covColNames, "./covColNames.txt", sep="\t")
write.table(covColNames, "./covColNames.txt", sep="\t", quotes=FALSE)
write.table(covColNames, "./covColNames.txt", sep="\t", quote=FALSE)
write.table(phenoColNames, "./phenColNames.txt", sep="\t", quote=FALSE)
covColNames
names(allData)
ariData <- allData[c(1:4, 7,8,13,14,18,22,134,135)]
names(ariData)
head(ariData)
write.table(ariData, "./AIL-hindlimb-sampleInfo.txt", sep="\t", row.names=FALSE,quote=FALSE)
phenotypeErrors <- c(46026,46022,46025,46375,46387,46348,46352,46344,46340,46441)
write.table(phenotypeErrors, "./phenoErrors.txt", sep="\t", row.names=FALSE)
names(phen)
write.table(cov, "./covariatesAIL.txt", sep="\t", row.names=FALSE,)
write.table(cov, "./covariatesAIL.txt", sep="\t", row.names=FALSE,
col.names=FALSE, quotes=FALSE)
col.names=FALSE, quote=FALSE)
write.table(cov, "./covariatesAIL.txt", sep="\t", row.names=FALSE, col.names=FALSE, quote=FALSE)
write.table(phen, "./phenosAIL.txt", sep="\t", row.names=FALSE, col.names=FALSE, quote=FALSE)
