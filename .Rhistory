library(xlsx)
myUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
doc <- download.file(myUrl, "./data.xlsx")
dat <- read.xlsx("./data.xlsx", 1, rowIndex=c(18:23), colIndex=c(7:15))
doc <- download.file(myUrl, "./data.xlsx", mode="wb")
dat <- read.xlsx("./data.xlsx", 1, rowIndex=c(18:23), colIndex=c(7:15))
head(dat)
sum(dat$Zip*dat$Ext,na.rm=T)
newUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(newUrl, useInternal=TRUE)
library("XML", lib.loc="C:/Program Files/R/R-3.1.1/library")
doc <- xmlTreeParse(newUrl, useInternal=TRUE)
doc <- download.file(newUrl, "./question4.xml")
doc
doc <- download.file(newUrl, "./question4.xml", method="wb")
doc <- download.file(newUrl, "./question4.xml", method="w")
doc <- download.file(newUrl, "./question4.xml")
four <- xmlParseString(doc)
four
newUrl <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- download.file(newUrl, "./question4.xml")
four <- xmlTreeParse(newUrl, useInternal=TRUE)
four
rootNode <- xmlRoot(four) # wrapper element for the entire document
rootNode
test <- xmlParseString(newUrl, useInternal=TRUE)
test <- xmlParseString(newUrl)
test
xmlName(rootNode)
rootNode[[2]]
four[[2]]
xpathSApply(four, "//name", xmlValue)
zips <- xpathSApply(four, "//zipcode", xmlValue)
head(zips)
zipAnswer <- xpathSApply(four, "//li[@zipcode='21231']", xmlValue)
zipAnswer
zipAnswer <- xpathSApply(four, "//li[@class='zipcode']", xmlValue)
zipAnswer
class(zips)
as.table(zips)
t = as.data.frame(zips)
t
head(t)
z <- which[t$zips == "21231",]
z <- subset(t$zips == 21231)
z <- subset(t$zips == "21231")
z <- subset(t, t$zips == 21231)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
acs<- download.file(url, "./acs.csv")
?fread
library("data.table", lib.loc="C:/Program Files/R/R-3.1.1/library")
?fread
DT <- fread(acs, sep=",")
DT <- fread("./acs.csv", sep=",")
head(DT)
str(DT)
DT[,mean(pwgtp15),by=SEX]
tapply(DT$pwgtp15,DT$SEX,mean)
mean(DT$pwgtp15,by=DT$SEX)
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
sapply(split(DT$pwgtp15,DT$SEX),mean)
?system.time
a=DT[,mean(pwgtp15),by=SEX]
b=tapply(DT$pwgtp15,DT$SEX,mean)
c=mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
d=sapply(split(DT$pwgtp15,DT$SEX),mean)
system.time(a)
system.time(b)
system.time(c)
system.time(d)
system.time(for (i in 1:1000), a)
system.time(for (i in 1:1000) a)
system.time(for (i in 1:1000) DT[,mean(pwgtp15),by=SEX])
system.time(for (i in 1:1000) tapply(DT$pwgtp15,DT$SEX,mean))
system.time(for (i in 1:1000) sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(for (i in 1:1000) mean(DT[DT$SEX==2,]$pwgtp15))
library(lattice)
library(datasets)
airquality <- transform(airquality, Month=factor(Month))
xyplot(Ozone ~ Wind | Month, data=airquality, layout=c(5,1))
set.seed(10)
x <- rnorm(100)
y <- rep(0:1, each=50)
y <- x+f-f*x+rnorm(100, sd=0.5)
f <- factor(f, labels=c("Group1", "Group2"))
xyplot(y~x | f, layout=c(2,1))
f <- factor(f, labels=c("Group1", "Group2"))
set.seed(10)
x <- rnorm(100)
f <- rep(0:1, each=50)
y <- x+f-f*x+rnorm(100, sd=0.5)
f <- factor(f, labels=c("Group1", "Group2"))
xyplot(y~x | f, layout=c(2,1))
xyplot(y ~ x | f, panel= function(x,y,...) {
panel.xyplot(x,y, ...) # first call the default panel function for xyplot
panel.abline(h= median(y), lty=2) # add horizontal line at median
})
xyplot(y ~ x | f, panel= function(x,y,...) {
panel.xyplot(x,y, ...) # first call the default panel function for xyplot
panel.abline(h= median(y), lty=2) # add horizontal line at median
panel.lmline(x,y, col=2)
})
install.packages("RMySQL", type="source")
library(RMySQL)
con <- dbConnect(MySQL(), host="127.0.0.1", port= 3306, user="user",
password = "password", dbname="db")
con <- dbConnect(MySQL(), host="127.0.0.1", port= 3306, user="user",
password = "$m00ch3rOO", dbname="db")
con <- dbConnect(MySQL(), host="127.0.0.1", port= 3306, user="user",
password = """, dbname="db")
load("~/Dropbox/Palmer Lab/Natalia Gonzales/AIL/phenoData.RData")
setwd("C:/Users/Administrator/Desktop/Scripts/AIL CPP interim analyses/phenosForShyam")
setwd("C:/Users/Administrator/Desktop/Scripts/LgSm-DataProcessing")
list.files()
library(xlsx)
cppData <- read.xlsx(file="./PHENOTYPES.xlsx", sheetName="CPP_all",
startRow=1, endRow=1024, na.strings="NA")
cppData[do.call(order, cppData),]
cppData <- cppData[do.call(order, cppData),]
write.table(cppData, file="cppData.txt", rownames=FALSE, sep=" ")
write.table(cppData, file="cppData.txt", row.names=FALSE, sep=" ")
load("cppData.txt")
write.table(cppData, file="./cppData.txt", row.names=FALSE, sep=" ")
write.table(cppData, file="./cppData.txt", row.names=FALSE, sep=" ", quote="")
write.table(cppData, file="./cppData.txt", row.names=FALSE, sep=" ", quote=" ")
write.table(cppData, file="./cppData.txt", row.names=FALSE, sep=" ", quote=FALSE)
cppData <- cppData[,c(1:119)]
names(cppData)
write.table(cppData, file="./cppData.txt", row.names=FALSE, sep=" ", quote=FALSE)
name <- name
name <- name[]
name <- df[]
name <- df[ ]
readPheno <- function(filename, name){
name <- read.table(filename, sep=" ", na.strings="NA", header=TRUE)
name <- name[do.call(order, name),]
return(name)
}
readPheno("./cppData.txt", cppData)
write.table(cppData, file="./cppData.txt", row.names=FALSE, sep=" ", quote=FALSE,
na.strings="NA")
cpp <- read.table("./cppData.txt", row.names=FALSE, header=TRUE, na.strings="NA")
cppData[134,]
sum(names(cppData))
names(cppData)
cpp <- read.table("./cppData.txt", header=TRUE, na.strings="NA")
head(cppData)
rm(cppData)
readPheno("./cppPhenos.txt", cppData)
readPheno()
readPheno <- function(filename, name){
name <- read.table(filename, sep="\t", na.strings="NA", header=TRUE)
name <- name[do.call(order, name),]
name <- return(name)
}
readPheno("./cppPhenos.txt", cppData)
readPheno <- function(filename, name){
name <- read.table(filename, sep="\t", na.strings="NA", header=TRUE)
name <- name[do.call(order, name),]
name <- return(as.data.frame(name))
}
readPheno("./cppPhenos.txt", cppData)
readPheno <- function(filename){}
name <- read.table(filename, sep="\t", na.strings="NA", header=TRUE)
name <- name[do.call(order, name),]
}
readPheno <- function(filename){
name <- read.table(filename, sep="\t", na.strings="NA", header=TRUE)
name <- name[do.call(order, name),]
}
cppData <- readPheno("./cppData.txt")
otherData <-read.xlsx(file="./PHENOTYPES.xlsx", sheetName="Other",
startRow=1, endRow=1024, na.strings="NA")
otherData <-read.xlsx(file="./PHENOTYPES.xlsx", sheetName="Other ",
startRow=1, endRow=1024, na.strings="NA")
names(otherData)
otherData <- otherData[,c(1:16)]
names(otherData)
write.table(otherData, "./otherPhenotypes.txt", sep=" ", row.names=FALSE, quote=FALSE)
head(otherData)
write.table(otherData[,1:2], "./idAndGen.txt", sep=" ", row.names=FALSE, quote=FALSE)
names(otherData)
rm(otherData)
list.files()
other<- readPheno("./otherPhenotypes.txt")
read.table("./otherPhenotypes.txt", header=TRUE, sep=" ", na.strings="NA")
otherData <-read.xlsx(file="./PHENOTYPES.xlsx", sheetName="Other ",
startRow=1, endRow=1024, na.strings="NA")
otherData <- otherData[,c(1, 9:16)]
names(otherData)
write.table(otherData, "./otherData", header=TRUE, quotes=FALSE, sep=" ")
write.table(otherData, "./otherData", row.names=FALSE, sep=" ")
other<- readPheno("./otherData")
rm(other)
write.table(otherData, "./otherData", row.names=FALSE, sep="\t")
other<- readPheno("./otherData")
rm(otherData)
rm(cppData)
readPheno <- function(filename){
name <- read.table(filename, sep=" ", na.strings="NA", header=TRUE)
name <- name[do.call(order, name),]
}
cppData <- readPheno("./cppPhenos.txt")
cppData <- readPheno("./cppData.txt")
list.files()
readPheno <- function(filename){
name <- read.table(filename, sep="", na.strings="NA", header=TRUE)
name <- name[do.call(order, name),]
}
cppData<-readPheno(
"./cppData.txt")
cppData<-readPheno(
"./cppPhenos.txt")
cppData<- read.table("./cppPhenos.txt", sep="\t", header=TRUE)
head(cppData)
names(cppData)
rm(readPheno)
write.table(other, file="./otherPhenos.txt", sep="\t", row.names=FALSE, quote=FALSE)
test <- read.table("./otherPhenos.txt", sep="\t", na.strings=NA, header=TRUE)
head(test)
identical(other, test)
head(other)
class(other)
class(cppData)
class(test)
other <- other[do.call(order, other),]
ppiInfo <- read.table(file="ppi.info.csv", sep=",", header=TRUE, na.strings="NA")
ppiInfo <- ppiInfo[do.call(ppi)]
ppiInfo <- ppiInfo[do.call(ppiInfo)]
ppiInfo <- ppiInfo[do.call(ppiInfo),]
ppiInfo <- ppiInfo[do.call(order, ppiInfo),]
ppiData <- read.table(file="ppiJul2014.csv", sep=",", header=TRUE, na.strings="NA")
ppiData <- ppiData[do.call(order, ppiData),]
rm(test)
names(ppiData)
names(ppiInfo)
names(ppiData)[1] <- "id"
names(ppiData)[1:4]
names(ppiData)[2] <- "ppi.box"
names(ppiData)[1:4]
ppiData <- ppiData[,c(1:2, 81:87)]
names(ppiData)
names(ppiData)[1:6] <- c("id", "ppi.box", "ppi3", "ppi6", "ppi12", "avg.ppi")
names(ppiData)
ppiMerge <- merge(ppiInfo, ppiData, by="id", all=FALSE)
ppiMerge <- merge(ppiInfo, ppiData, by="id", all=TRUE)
head(ppiMerge)
unique(ppiMerge$id)
sum(!unique(ppiMerge$id))
duplicated(ppiMerge$id)
ppiMerge[1002:1005,]
a<-ppiMerge[-c(1005),]
[1002:1005,]
a[1002:1005,]
ppiMerge <- a
rm(a)
ppiOther <- merge(ppiMerge, other, by="id", all=TRUE)
duplicated(ppiOther$id)
where(duplicated(ppiOther$id))
which(duplicated(ppiOther$id))
ppiOther[810:813,]
allData <- merge(cppData, ppiOther, by="id", all=TRUE)
which(duplicated(allData$id))
names(allData)
identical(allData$gen.y, allData$gen.x)
identical(allData$sex.y, allData$sex.x)
write.table(allData, "./mergedData.txt", sep="\t", row.names=FALSE, quote=FALSE)
check <- allData[,complete.cases(allData)]
check <- allData[complete.cases(allData),]
names(check)
identical(check$sex.y, check$sex.x)
identical(check$fam.x, check$fam.y)
identical(check$dam.x, check$dam.y)
identical(check$sire.x, check$sire.y)
which(identical(check$sire.x, check$sire.y))
which(!identical(check$sire.x, check$sire.y))
check[1,]
